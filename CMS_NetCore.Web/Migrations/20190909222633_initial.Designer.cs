// <auto-generated />
using System;
using CMS_NetCore.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CMS_NetCore.Web.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190909222633_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CMS_NetCore.DomainClasses.Address_User", b =>
                {
                    b.Property<int>("Address_UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<string>("HomeNo")
                        .HasMaxLength(100);

                    b.Property<string>("MobileNo")
                        .HasMaxLength(100);

                    b.Property<string>("NameFamily")
                        .HasMaxLength(100);

                    b.Property<string>("PostAddress")
                        .HasMaxLength(100);

                    b.Property<string>("State")
                        .HasMaxLength(100);

                    b.Property<int>("UserId");

                    b.Property<string>("postalCode")
                        .HasMaxLength(100);

                    b.HasKey("Address_UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Address_Users");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.AttributGrp", b =>
                {
                    b.Property<int>("AttributGrpId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attr_type")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("ProductGroupId");

                    b.HasKey("AttributGrpId");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("AttributGrps");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.AttributItem", b =>
                {
                    b.Property<int>("AttributItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttributGrpId");

                    b.Property<string>("Name");

                    b.Property<string>("idfilter");

                    b.Property<string>("value");

                    b.HasKey("AttributItemId");

                    b.HasIndex("AttributGrpId");

                    b.ToTable("AttributItems");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("CityIcon");

                    b.Property<string>("CityName")
                        .HasMaxLength(30);

                    b.Property<int>("StateId");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.Component", b =>
                {
                    b.Property<int>("ComponentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .HasMaxLength(30);

                    b.Property<string>("AdminAction")
                        .HasMaxLength(30);

                    b.Property<string>("AdminController")
                        .HasMaxLength(30);

                    b.Property<string>("ComponentName")
                        .HasMaxLength(30);

                    b.Property<string>("ControllerName")
                        .HasMaxLength(30);

                    b.Property<string>("Descroption")
                        .HasMaxLength(500);

                    b.HasKey("ComponentId");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.ContactModule", b =>
                {
                    b.Property<int>("ContactModuleId");

                    b.Property<string>("Address");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("MobileNum");

                    b.Property<string>("PhoneNum");

                    b.Property<string>("PostCode");

                    b.HasKey("ContactModuleId");

                    b.ToTable("ContactModules");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.ContactPerson", b =>
                {
                    b.Property<int>("ContactPersonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactModuleId");

                    b.Property<int>("UserId");

                    b.HasKey("ContactPersonId");

                    b.HasIndex("ContactModuleId");

                    b.HasIndex("UserId");

                    b.ToTable("ContactPersons");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.DetailGroup", b =>
                {
                    b.Property<int>("DetailGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("ProductGroupId");

                    b.HasKey("DetailGroupId");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("DetailGroups");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.DetailItem", b =>
                {
                    b.Property<int>("DetailItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DetailGroupId");

                    b.Property<string>("DetailTitle")
                        .HasMaxLength(100);

                    b.Property<string>("DetailType")
                        .HasMaxLength(100);

                    b.HasKey("DetailItemId");

                    b.HasIndex("DetailGroupId");

                    b.ToTable("DetailItems");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.HtmlModule", b =>
                {
                    b.Property<int>("HtmlModuleId");

                    b.Property<string>("HtmlText");

                    b.Property<int>("ModuleId");

                    b.HasKey("HtmlModuleId");

                    b.ToTable("HtmlModules");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Depth");

                    b.Property<string>("Description");

                    b.Property<int?>("DisplayOrder");

                    b.Property<bool?>("IsActive")
                        .IsRequired();

                    b.Property<int>("MenuGroupId");

                    b.Property<string>("MenuTitle")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PageContetnt")
                        .HasMaxLength(100);

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PageType")
                        .HasMaxLength(100);

                    b.Property<int?>("ParentId");

                    b.Property<string>("Path")
                        .HasMaxLength(100);

                    b.HasKey("MenuId");

                    b.HasIndex("MenuGroupId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.MenuGroup", b =>
                {
                    b.Property<int>("MenuGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive")
                        .IsRequired();

                    b.Property<string>("MenuTitile")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MenuType")
                        .HasMaxLength(50);

                    b.HasKey("MenuGroupId");

                    b.ToTable("MenuGroups");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.MenuModule", b =>
                {
                    b.Property<int>("MenuModuleId");

                    b.Property<int>("MenuGroupId");

                    b.HasKey("MenuModuleId");

                    b.HasIndex("MenuGroupId");

                    b.ToTable("MenuModules");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("ContentMessage");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<int?>("FromUser");

                    b.Property<string>("IP")
                        .HasMaxLength(100);

                    b.Property<bool?>("ISRead");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("SenderName")
                        .HasMaxLength(50);

                    b.Property<string>("Subject")
                        .HasMaxLength(50);

                    b.Property<int?>("ToUser");

                    b.HasKey("MessageId");

                    b.HasIndex("FromUser");

                    b.HasIndex("ToUser");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accisibility");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<int>("ComponentId");

                    b.Property<int?>("DisplayOrder");

                    b.Property<string>("IP")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsActive")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ModuleTitle")
                        .HasMaxLength(50);

                    b.Property<int>("PositionId");

                    b.HasKey("ModuleId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("PositionId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.ModulePage", b =>
                {
                    b.Property<int>("ModulePageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MenuId");

                    b.Property<int>("ModuleId");

                    b.HasKey("ModulePageId");

                    b.HasIndex("MenuId");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModulePages");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("AliasName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("IP")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("NewsDescription");

                    b.Property<int>("NewsGroupId");

                    b.Property<string>("NewsImage")
                        .HasMaxLength(150);

                    b.Property<string>("NewsTitle")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("UserId");

                    b.HasKey("NewsId");

                    b.HasIndex("NewsGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.NewsGallery", b =>
                {
                    b.Property<int>("NewsGalleryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageName")
                        .HasMaxLength(50);

                    b.Property<int>("NewsId");

                    b.HasKey("NewsGalleryId");

                    b.HasIndex("NewsId");

                    b.ToTable("NewsGalleries");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.NewsGroup", b =>
                {
                    b.Property<int>("NewsGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("AliasName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("Depth");

                    b.Property<int?>("DisplayOrder");

                    b.Property<string>("GroupTitle")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("IP")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsActive")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ParentId")
                        .IsRequired();

                    b.Property<string>("Path");

                    b.HasKey("NewsGroupId");

                    b.ToTable("NewsGroups");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.NewsTag", b =>
                {
                    b.Property<int>("NewsTagId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NewsId");

                    b.Property<string>("TagsTitle")
                        .HasMaxLength(150);

                    b.HasKey("NewsTagId");

                    b.HasIndex("NewsId");

                    b.ToTable("NewsTags");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("IP")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsFinally");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("UserId");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductCount");

                    b.Property<int>("ProductId");

                    b.Property<int>("ProductPrice");

                    b.Property<int>("Sum");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PositionName")
                        .HasMaxLength(50);

                    b.Property<string>("PositionTitle")
                        .HasMaxLength(50);

                    b.HasKey("PositionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("AliasName")
                        .IsRequired();

                    b.Property<int?>("GroupModel");

                    b.Property<string>("IP")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("ProductGroupId");

                    b.Property<string>("ProductImage")
                        .HasMaxLength(100);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ProductTitle")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ProductId");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.ProductDetail", b =>
                {
                    b.Property<int>("ProductDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DetailItemId");

                    b.Property<int>("ProductId");

                    b.Property<string>("Value")
                        .HasMaxLength(100);

                    b.HasKey("ProductDetailId");

                    b.HasIndex("DetailItemId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.ProductGallery", b =>
                {
                    b.Property<int>("ProductGalleryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageName")
                        .HasMaxLength(100);

                    b.Property<int>("ProductId");

                    b.HasKey("ProductGalleryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductGalleries");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.ProductGroup", b =>
                {
                    b.Property<int>("ProductGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("AliasName")
                        .IsRequired();

                    b.Property<int?>("Depth");

                    b.Property<int?>("DisplayOrder");

                    b.Property<string>("GroupTitle")
                        .IsRequired();

                    b.Property<string>("IP")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsActive")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ParentId")
                        .IsRequired();

                    b.Property<string>("Path");

                    b.Property<string>("type");

                    b.HasKey("ProductGroupId");

                    b.ToTable("ProductGroups");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.ProductRequest", b =>
                {
                    b.Property<int>("ProductRequestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descript");

                    b.Property<string>("NAme");

                    b.Property<int>("ProductGroupId");

                    b.Property<string>("Response")
                        .HasMaxLength(150);

                    b.Property<int>("UserId");

                    b.Property<string>("details")
                        .HasMaxLength(150);

                    b.Property<int?>("productID");

                    b.Property<string>("status")
                        .HasMaxLength(150);

                    b.HasKey("ProductRequestId");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductRequests");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.ProductTag", b =>
                {
                    b.Property<int>("ProductTagId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId");

                    b.Property<string>("TagTitle")
                        .HasMaxLength(100);

                    b.HasKey("ProductTagId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTages");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.Product_Attribut", b =>
                {
                    b.Property<int>("Product_AttributId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttributItemId");

                    b.Property<int>("ProductId");

                    b.Property<string>("Value")
                        .HasMaxLength(100);

                    b.Property<bool?>("isChecked");

                    b.HasKey("Product_AttributId");

                    b.HasIndex("AttributItemId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Attributs");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.RequestDetail", b =>
                {
                    b.Property<int>("RequestDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DetailItemId");

                    b.Property<int?>("ProductRequestId");

                    b.Property<string>("value")
                        .HasMaxLength(50);

                    b.HasKey("RequestDetailId");

                    b.HasIndex("DetailItemId");

                    b.HasIndex("ProductRequestId");

                    b.ToTable("RequestDetails");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("RoleTitle")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StateIcon")
                        .HasMaxLength(100);

                    b.Property<string>("StateName")
                        .HasMaxLength(50);

                    b.HasKey("StateId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.Store", b =>
                {
                    b.Property<string>("StoreId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddedDate");

                    b.Property<int?>("CityId")
                        .IsRequired();

                    b.Property<string>("Descriptions");

                    b.Property<int?>("Favorite");

                    b.Property<string>("IP")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int?>("SeeStore");

                    b.Property<string>("SiteAddress")
                        .HasMaxLength(250);

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("StoreAddress")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("StoreIcon")
                        .HasMaxLength(50);

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("StoreId");

                    b.HasIndex("CityId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.StoreFollower", b =>
                {
                    b.Property<int>("StoreFollowerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StoreId");

                    b.Property<int>("UserId");

                    b.HasKey("StoreFollowerId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("StoreFollowers");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.StoreInfo", b =>
                {
                    b.Property<int>("StoreInfoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StoreId")
                        .HasMaxLength(50);

                    b.Property<string>("ZindexMap")
                        .HasMaxLength(50);

                    b.Property<string>("banner")
                        .HasMaxLength(50);

                    b.Property<double?>("latitute");

                    b.Property<double?>("lngitute");

                    b.HasKey("StoreInfoId");

                    b.HasIndex("StoreId")
                        .IsUnique()
                        .HasFilter("[StoreId] IS NOT NULL");

                    b.ToTable("StoreInfo");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.StoreTime", b =>
                {
                    b.Property<int>("StoreTimeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Days")
                        .HasMaxLength(50);

                    b.Property<string>("StoreId");

                    b.Property<string>("fromTime")
                        .HasMaxLength(50);

                    b.Property<string>("toTime")
                        .HasMaxLength(50);

                    b.HasKey("StoreTimeId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreTimes");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.StoresProduct", b =>
                {
                    b.Property<int>("StoresProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("Color")
                        .HasMaxLength(100);

                    b.Property<string>("IP")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsActive");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OffPrice")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Price");

                    b.Property<int>("ProductId");

                    b.Property<string>("StoreId");

                    b.Property<string>("detail")
                        .HasMaxLength(100);

                    b.Property<string>("linkSale")
                        .HasMaxLength(100);

                    b.HasKey("StoresProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoresProducts");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("IP")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<int>("TicketGroupId");

                    b.Property<string>("Title")
                        .HasMaxLength(50);

                    b.Property<int>("UserId");

                    b.HasKey("TicketId");

                    b.HasIndex("TicketGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.TicketGroup", b =>
                {
                    b.Property<int>("TicketGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Subject")
                        .HasMaxLength(50);

                    b.Property<int>("chartPostId");

                    b.HasKey("TicketGroupId");

                    b.HasIndex("chartPostId");

                    b.ToTable("TicketGroups");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.TicketMsg", b =>
                {
                    b.Property<int>("TicketMsgId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("IP")
                        .HasMaxLength(100);

                    b.Property<string>("Message")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("TicketId");

                    b.Property<int?>("UserId");

                    b.HasKey("TicketMsgId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketMsgs");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActiveCode")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("Adress")
                        .HasMaxLength(50);

                    b.Property<string>("BirthDate")
                        .HasMaxLength(50);

                    b.Property<int?>("City");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("IP")
                        .HasMaxLength(100);

                    b.Property<bool?>("ISActive");

                    b.Property<string>("MeliID")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .HasMaxLength(50);

                    b.Property<string>("Profile")
                        .HasMaxLength(50);

                    b.Property<int>("RoleId");

                    b.Property<int?>("State");

                    b.Property<DateTime?>("activecodeDate");

                    b.Property<int?>("chartPostId");

                    b.Property<string>("moblie")
                        .HasMaxLength(50);

                    b.Property<string>("phoneNo")
                        .HasMaxLength(50);

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("chartPostId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.UserStore", b =>
                {
                    b.Property<int>("UserStoreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("IP")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("StoreId")
                        .HasMaxLength(50);

                    b.Property<int>("UserId");

                    b.HasKey("UserStoreId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("UserStores");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.chartPost", b =>
                {
                    b.Property<int>("chartPostId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Postduty")
                        .HasMaxLength(50);

                    b.HasKey("chartPostId");

                    b.ToTable("chartPosts");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.tbl_Help", b =>
                {
                    b.Property<int>("tbl_HelpId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId");

                    b.Property<bool?>("chidari");

                    b.Property<bool?>("firsttime");

                    b.Property<bool?>("kala");

                    b.Property<bool?>("kihasti");

                    b.Property<bool?>("kojai");

                    b.Property<bool?>("pishkhan");

                    b.HasKey("tbl_HelpId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_Helps");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.Address_User", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.User", "Users")
                        .WithMany("Address_Users")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.AttributGrp", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.ProductGroup", "ProductGroup")
                        .WithMany("AttributGrp")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.AttributItem", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.AttributGrp", "AttributGrp")
                        .WithMany("AttributItem")
                        .HasForeignKey("AttributGrpId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.City", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.State", "State")
                        .WithMany("City")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.ContactModule", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.Module", "Module")
                        .WithOne("ContactModule")
                        .HasForeignKey("CMS_NetCore.DomainClasses.ContactModule", "ContactModuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.ContactPerson", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.ContactModule", "ContactModule")
                        .WithMany("ContactPerson")
                        .HasForeignKey("ContactModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMS_NetCore.DomainClasses.User", "User")
                        .WithMany("ContactPersons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.DetailGroup", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.ProductGroup", "ProductGroup")
                        .WithMany("DetailGroups")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.DetailItem", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.DetailGroup", "DetailGroup")
                        .WithMany("DetailItem")
                        .HasForeignKey("DetailGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.HtmlModule", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.Module", "Module")
                        .WithOne("HtmlModule")
                        .HasForeignKey("CMS_NetCore.DomainClasses.HtmlModule", "HtmlModuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.Menu", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.MenuGroup", "MenuGroup")
                        .WithMany("Menu")
                        .HasForeignKey("MenuGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.MenuModule", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.MenuGroup", "MenuGroup")
                        .WithMany("MenuModule")
                        .HasForeignKey("MenuGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMS_NetCore.DomainClasses.Module", "Module")
                        .WithOne("MenuModule")
                        .HasForeignKey("CMS_NetCore.DomainClasses.MenuModule", "MenuModuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.Message", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.User", "UsersFrom")
                        .WithMany("Messages")
                        .HasForeignKey("FromUser");

                    b.HasOne("CMS_NetCore.DomainClasses.User", "UsersTo")
                        .WithMany("Messages1")
                        .HasForeignKey("ToUser");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.Module", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.Component", "Component")
                        .WithMany("Module")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMS_NetCore.DomainClasses.Position", "Position")
                        .WithMany("Module")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.ModulePage", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.Menu", "Menu")
                        .WithMany("ModulePage")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMS_NetCore.DomainClasses.Module", "Module")
                        .WithMany("ModulePage")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.News", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.NewsGroup", "NewsGroup")
                        .WithMany("News")
                        .HasForeignKey("NewsGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMS_NetCore.DomainClasses.User", "User")
                        .WithMany("News")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.NewsGallery", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.News", "News")
                        .WithMany("NewsGallery")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.NewsTag", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.News", "News")
                        .WithMany("NewsTag")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.Order", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.OrderDetail", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.Order", "Order")
                        .WithMany("OrderDetail")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMS_NetCore.DomainClasses.Product", "Product")
                        .WithMany("OrderDetail")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.Product", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.ProductGroup", "ProductGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.ProductDetail", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.DetailItem", "DetailItem")
                        .WithMany("ProductDetail")
                        .HasForeignKey("DetailItemId");

                    b.HasOne("CMS_NetCore.DomainClasses.Product", "Product")
                        .WithMany("ProductDetail")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.ProductGallery", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.Product", "Product")
                        .WithMany("ProductGallery")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.ProductRequest", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.ProductGroup", "ProductGroup")
                        .WithMany("ProductRequest")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMS_NetCore.DomainClasses.User", "Users")
                        .WithMany("ProductRequest")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.ProductTag", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.Product", "Product")
                        .WithMany("ProductTag")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.Product_Attribut", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.AttributItem", "AttributItem")
                        .WithMany("Product_Attribut")
                        .HasForeignKey("AttributItemId");

                    b.HasOne("CMS_NetCore.DomainClasses.Product", "Product")
                        .WithMany("Product_Attribut")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.RequestDetail", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.DetailItem", "DetailItem")
                        .WithMany("RequestDetail")
                        .HasForeignKey("DetailItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMS_NetCore.DomainClasses.ProductRequest", "ProductRequest")
                        .WithMany("RequestDetail")
                        .HasForeignKey("ProductRequestId");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.Store", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.City", "Cities")
                        .WithMany("Store")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.StoreFollower", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.Store", "Store")
                        .WithMany("StoreFollower")
                        .HasForeignKey("StoreId");

                    b.HasOne("CMS_NetCore.DomainClasses.User", "User")
                        .WithMany("StoreFollower")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.StoreInfo", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.Store", "Store")
                        .WithOne("StoreInfo")
                        .HasForeignKey("CMS_NetCore.DomainClasses.StoreInfo", "StoreId");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.StoreTime", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.Store", "Store")
                        .WithMany("StoreTime")
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.StoresProduct", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.Product", "Product")
                        .WithMany("StoresProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMS_NetCore.DomainClasses.Store", "Store")
                        .WithMany("StoresProduct")
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.Ticket", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.TicketGroup", "TicketGroup")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMS_NetCore.DomainClasses.User", "User")
                        .WithMany("Ticket")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.TicketGroup", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.chartPost", "chartPost")
                        .WithMany("TicketGroup")
                        .HasForeignKey("chartPostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.TicketMsg", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.Ticket", "Ticket")
                        .WithMany("TicketMsg")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMS_NetCore.DomainClasses.User", "User")
                        .WithMany("TicketMsg")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.User", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMS_NetCore.DomainClasses.chartPost", "chartPost")
                        .WithMany("User")
                        .HasForeignKey("chartPostId");
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.UserStore", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.Store", "Store")
                        .WithMany("UserStore")
                        .HasForeignKey("StoreId");

                    b.HasOne("CMS_NetCore.DomainClasses.User", "User")
                        .WithMany("UserStore")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMS_NetCore.DomainClasses.tbl_Help", b =>
                {
                    b.HasOne("CMS_NetCore.DomainClasses.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
